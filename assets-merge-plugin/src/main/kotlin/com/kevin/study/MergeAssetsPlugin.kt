/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.kevin.study

import com.android.build.gradle.AppExtension
import com.android.build.gradle.LibraryExtension
import org.gradle.api.Plugin
import org.gradle.api.Project
import java.io.File

/**
 * A simple 'hello world' plugin.
 */
class MergeAssetsPlugin: Plugin<Project> {

    companion object {
        const val MERGE_HANDLER = "mergeHandler"
    }

    override fun apply(project: Project) {
        //library(project)


        // 1、创建拓展参数
        project.extensions.create(MergeHandler::class.java, MERGE_HANDLER, DefaultMergeHandler::class.java)
        // 2、同步配置完成后，决定打完包之后执行上传操作
        project.afterEvaluate {
            val handler = project.extensions.findByType(MergeHandler::class.java)
            val androidExt = it.extensions.findByName("android") as AppExtension
            androidExt.applicationVariants.all { variant ->
                val variantTask = variant.mergeAssetsProvider.get()
                val taskName = "${variantTask.name}Custom"
                val workPath = variantTask.outputDir.asFile.get().absolutePath
                val mergeTask = project.tasks.create(taskName, MergeAssetFilesTask::class.java, workPath, handler)
                variantTask.finalizedBy(mergeTask)
            }

        }

    }

    private fun library(project: Project) {
        val libraryExt = project.extensions.findByName("android") as LibraryExtension

        val args = HashMap<String, String>()
        args["moduleName"] = project.name
        args["buildDir"] = project.buildDir.absolutePath
        libraryExt.defaultConfig.javaCompileOptions.annotationProcessorOptions.arguments = args

        val fileName = project.name + "_module_router.json"
        val tmpDirPath = project.buildDir.absolutePath + File.separator + "tmp" + File.separator +
                "klrouter" + File.separator

        project.afterEvaluate {
            libraryExt.libraryVariants.all { variant ->
                val variantTask = variant.mergeAssetsProvider.get()
                val workPath = variantTask.outputDir.asFile.get().absolutePath
                val baseName = variant.baseName
                val bName = baseName[0].toUpperCase() + baseName.substring(1, baseName.length)

                project.tasks.findByName("bundle${bName}Aar")?.doFirst {
                    copyFile(tmpDirPath + fileName, workPath + File.separator + fileName)
                }
            }
        }
    }

    private fun copyFile(src: String?, des: String?) {
        if (src.isNullOrEmpty() || des.isNullOrEmpty()) {
            return
        }
        val srcFile = File(src)
        if (srcFile.exists()) {
            val desFile = File(des)
            if (desFile.exists()) {
                desFile.delete()
            }
            srcFile.copyTo(desFile, true)
        }
    }


}
